import streamlit as st
# --- PyTorch 2.6 safe-load FIX (–¥–µ–ª–∞–π —ç—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–≤–µ—Ä—è–µ—à—å —Å–≤–æ–∏–º .pt) ---
from torch.serialization import add_safe_globals
from ultralytics.nn.tasks import DetectionModel, SegmentationModel, PoseModel, ClassificationModel

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ torch.nn –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ —á–µ–∫–ø–æ–∏–Ω—Ç–∞—Ö
import torch.nn as nn

add_safe_globals([
    # Ultralytics –º–æ–¥–µ–ª–∏
    DetectionModel, SegmentationModel, PoseModel, ClassificationModel,

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ torch.nn
    nn.Sequential, nn.ModuleList, nn.ReLU, nn.SiLU, nn.LeakyReLU, nn.Sigmoid,
    nn.Conv2d, nn.ConvTranspose2d, nn.BatchNorm2d, nn.GroupNorm,
    nn.MaxPool2d, nn.AdaptiveAvgPool2d, nn.Upsample,
    nn.Linear, nn.Dropout,
])
# --- –∫–æ–Ω–µ—Ü FIX ---

from ultralytics import YOLO
from PIL import Image
import cv2
import io

# ===== Page & Theme =====
st.set_page_config(page_title="Car Condition Analyzer", page_icon="üöó", layout="wide")

# ---- Minimal CSS for clean UI ----
st.markdown("""
<style>
/* Global tweaks */
.block-container {padding-top: 1.5rem; padding-bottom: 2rem;}
/* Fancy title bar */
.hero {
  background: linear-gradient(135deg, #111827 0%, #1f2937 50%, #0ea5e9 100%);
  color: white; padding: 22px 22px; border-radius: 18px; margin-bottom: 18px;
  border: 1px solid rgba(255,255,255,0.06);
}
/* Badges */
.badge {display:inline-block; padding:6px 10px; border-radius:999px; font-weight:600; font-size:0.9rem; margin-right:8px;}
.badge-green {background:#10b98122; color:#10b981; border:1px solid #10b98155;}
.badge-red {background:#ef444422; color:#ef4444; border:1px solid #ef444455;}
.badge-blue {background:#3b82f622; color:#3b82f6; border:1px solid #3b82f655;}
/* Cards */
.card {border:1px solid rgba(0,0,0,0.08); border-radius:16px; padding:16px;}
/* Section titles */
h3, h4 {margin-top: 0.6rem;}
/* Tips */
.tip {font-size:0.9rem; opacity:0.85}
</style>
""", unsafe_allow_html=True)

# ---- Header ----
st.markdown("""
<div class="hero">
  <h1 style="margin:0;">üöó Car Condition Analyzer</h1>
  <div class="tip">–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –º–∞—à–∏–Ω—ã ‚Äî –ø–æ–ª—É—á–∏—à—å –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ —á–∏—Å—Ç–æ—Ç–µ –∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏.</div>
</div>
""", unsafe_allow_html=True)

# ---- Sidebar ----
with st.sidebar:
    st.header("‚öôÔ∏è Options")
    st.caption("UX-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è).")
    show_dirty_layer = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–π 'Dirty'", value=True)
    show_damage_layer = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª–æ–π 'Damage'", value=True)
    st.divider()
    st.subheader("‚ÑπÔ∏è Help")
    with st.expander("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"):
        st.write(
            "- –ó–∞–≥—Ä—É–∂–∞–µ—à—å JPG/PNG.\n"
            "- –ü–µ—Ä–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç **dirty** (–≥—Ä—è–∑—å). –ï—Å–ª–∏ –Ω–µ—Ç –±–æ–∫—Å–æ–≤ –∫–ª–∞—Å—Å–∞ dirty ‚Äî —Å—á–∏—Ç–∞–µ–º —á–∏—Å—Ç–æ–π.\n"
            "- –í—Ç–æ—Ä–∞—è –º–æ–¥–µ–ª—å –æ—Ç–º–µ—á–∞–µ—Ç **damaged** (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è). –ï—Å–ª–∏ –±–æ–∫—Å–æ–≤ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π.\n"
            "\n‚ö†Ô∏è –ú—ã –Ω–µ –º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏/–ª–æ–≥–∏–∫—É ‚Äî —Ç–æ–ª—å–∫–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
        )

# >>> –≤—Å—Ç–∞–≤—å –°–†–ê–ó–£ –ø–æ—Å–ª–µ import-–æ–≤, –ü–ï–†–ï–î YOLO("...") <<<
from torch.serialization import add_safe_globals
from ultralytics.nn.tasks import DetectionModel, SegmentationModel, PoseModel, ClassificationModel
add_safe_globals([DetectionModel, SegmentationModel, PoseModel, ClassificationModel])
# <<< –∫–æ–Ω–µ—Ü —Ñ–∏–∫—Å–∞ >>>

from ultralytics import YOLO

# –¥–∞–ª—å—à–µ –∫–∞–∫ –±—ã–ª–æ:
model_clean_dirty = YOLO("models/dirty_best.pt")
model_damage     = YOLO("models/damaged2_best.pt")
# ======= Load models (paths must exist) =======
@st.cache_resource(show_spinner=True)
def load_models():
    m_cd = YOLO("models/dirty_best.pt")       # 2 –∫–ª–∞—Å—Å–∞: clean(0), dirty(1)
    m_dmg = YOLO("models/damaged2_best.pt")   # 1 –∫–ª–∞—Å—Å: damaged(0)
    return m_cd, m_dmg

try:
    model_clean_dirty, model_damage = load_models()
    model_status = True
except Exception as e:
    model_status = False
    st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏: {e}")

# ======= Core logic (UNCHANGED) =======
def analyze_car(image):
    # clean/dirty (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ dirty)
    result_cd = model_clean_dirty.predict(image, verbose=False)
    if len(result_cd[0].boxes) > 0:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω dirty
        dirty_found = any(int(cls.item()) == 1 for cls in result_cd[0].boxes.cls)
        if dirty_found:
            cd_label = "This car is dirty!"
        else:
            cd_label = "This car is clean!"
    else:
        cd_label = "This car is clean!"

    # damage/no damage (–ø–æ–∫–∞–∂–µ–º –±–æ–∫—Å—ã)
    result_dmg = model_damage.predict(image, verbose=False)
    if len(result_dmg[0].boxes) > 0:
        dmg_label = "This car is damaged!"
    else:
        dmg_label = "This car is not damaged!"

    return cd_label, dmg_label, result_cd, result_dmg

# ======= Uploader =======
uploaded_file = st.file_uploader("üì§ –ü–µ—Ä–µ—Ç–∞—â–∏ —Å—é–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", type=["jpg", "jpeg", "png"])

if not model_status:
    st.stop()

if uploaded_file is None:
    st.info("üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Å–Ω–∏–º–æ–∫ —Å–±–æ–∫—É/¬æ, —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ.")
else:
    image = Image.open(uploaded_file).convert("RGB")

    # Left: preview; Right: results
    col_left, col_right = st.columns([7, 5], gap="large")

    with col_left:
        st.subheader("üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä")
        st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_container_width=True, output_format="PNG")

    with col_right:
        st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶"):
            clean_dirty, damage, result_cd, result_dmg = analyze_car(image)

        # Badges summary
        badge_cd = ('<span class="badge badge-red">Dirty</span>'
                    if "dirty" in clean_dirty.lower()
                    else '<span class="badge badge-green">Clean</span>')
        badge_dmg = ('<span class="badge badge-red">Damaged</span>'
                     if "damaged" in damage.lower()
                     else '<span class="badge badge-green">No Damage</span>')

        st.markdown(f"""
        <div class="card">
          <div style="display:flex; gap:8px; align-items:center; flex-wrap:wrap;">
            <span class="badge badge-blue">Summary</span>
            {badge_cd}{badge_dmg}
          </div>
          <div style="margin-top:8px;">
            <b>Clean/Dirty:</b> {clean_dirty}<br/>
            <b>Damage:</b> {damage}
          </div>
        </div>
        """, unsafe_allow_html=True)

    st.divider()

    # ======= Tabs for annotated views =======
    tabs = st.tabs(["üß© –í–∫–ª–∞–¥–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π", "üíæ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "‚ùî –ü–æ–¥—Å–∫–∞–∑–∫–∏"])

    with tabs[0]:
        subcol1, subcol2 = st.columns(2)
        # Clean/Dirty Detection (—Ä–∏—Å—É–µ–º —Ç–æ–ª—å–∫–æ dirty)
        with subcol1:
            st.markdown("#### –ì—Ä—è–∑—å (dirty)")
            if show_dirty_layer and "dirty" in clean_dirty.lower():
                cd_annotated = result_cd[0].orig_img.copy()
                for box in result_cd[0].boxes:
                    cls = int(box.cls[0].item())
                    if cls == 1:  # dirty
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        cv2.rectangle(cd_annotated, (x1, y1), (x2, y2), (255, 0, 0), 2)
                        cv2.putText(cd_annotated, "dirty", (x1, y1 - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)
                cd_annotated = cv2.cvtColor(cd_annotated, cv2.COLOR_BGR2RGB)
                st.image(cd_annotated, caption="üìå Clean/Dirty Detection", use_container_width=True)
            else:
                st.info("–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π –≥—Ä—è–∑–∏ –∏–ª–∏ —Å–ª–æ–π –æ—Ç–∫–ª—é—á—ë–Ω.")

        # Damage Detection
        with subcol2:
            st.markdown("#### –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è (damaged)")
            if show_damage_layer and ("damaged" in damage.lower()):
                dmg_annotated = result_dmg[0].plot()
                dmg_annotated = cv2.cvtColor(dmg_annotated, cv2.COLOR_BGR2RGB)
                st.image(dmg_annotated, caption="üìå Damage Detection", use_container_width=True)
            else:
                st.info("–ù–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –∏–ª–∏ —Å–ª–æ–π –æ—Ç–∫–ª—é—á—ë–Ω.")

    with tabs[1]:
        st.markdown("#### –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        dl_cols = st.columns(2)

        # Prepare annotated dirty image if exists
        dirty_img_bytes = None
        if "dirty" in clean_dirty.lower():
            cd_annotated = result_cd[0].orig_img.copy()
            for box in result_cd[0].boxes:
                cls = int(box.cls[0].item())
                if cls == 1:
                    x1, y1, x2, y2 = map(int, box.xyxy[0])
                    cv2.rectangle(cd_annotated, (x1, y1), (x2, y2), (255, 0, 0), 2)
                    cv2.putText(cd_annotated, "dirty", (x1, y1 - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, (255, 0, 0), 2)
            cd_annotated = cv2.cvtColor(cd_annotated, cv2.COLOR_BGR2RGB)
            buf = io.BytesIO()
            Image.fromarray(cd_annotated).save(buf, format="PNG")
            dirty_img_bytes = buf.getvalue()

        # Prepare annotated damage image if exists
        damage_img_bytes = None
        if "damaged" in damage.lower():
            dmg_annotated = result_dmg[0].plot()
            dmg_annotated = cv2.cvtColor(dmg_annotated, cv2.COLOR_BGR2RGB)
            buf2 = io.BytesIO()
            Image.fromarray(dmg_annotated).save(buf2, format="PNG")
            damage_img_bytes = buf2.getvalue()

        with dl_cols[0]:
            if dirty_img_bytes:
                st.download_button(
                    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å 'Dirty' —Å–ª–æ–π (PNG)",
                    data=dirty_img_bytes,
                    file_name="dirty_annotated.png",
                    mime="image/png"
                )
            else:
                st.caption("–ù–µ—Ç 'Dirty' —Å–ª–æ—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

        with dl_cols[1]:
            if damage_img_bytes:
                st.download_button(
                    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å 'Damage' —Å–ª–æ–π (PNG)",
                    data=damage_img_bytes,
                    file_name="damage_annotated.png",
                    mime="image/png"
                )
            else:
                st.caption("–ù–µ—Ç 'Damage' —Å–ª–æ—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")

    with tabs[2]:
        st.markdown("#### –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ UX")
        st.write(
            "- –ó–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ –±–µ–∑ —Å–∏–ª—å–Ω—ã—Ö –±–ª–∏–∫–æ–≤ –∏ —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º.\n"
            "- –°–Ω–∏–º–∞–π –ø–æ–¥ —É–≥–ª–æ–º ¬æ, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –≤–∏–¥–µ–ª–∞ –±–æ–ª—å—à–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.\n"
            "- –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–¥—Ä –ø–æ–∫—Ä—É–ø–Ω–µ–µ."
        )

    